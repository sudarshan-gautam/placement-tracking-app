# Combined Verifications Implementation Plan

## 1. Database Structure Requirements

We need to ensure the following tables exist in the database:

```sql
-- For session verifications
CREATE TABLE IF NOT EXISTS session_verifications (
    id TEXT PRIMARY KEY,
    session_id TEXT NOT NULL,
    student_id TEXT NOT NULL,
    verification_status TEXT CHECK(verification_status IN ('pending', 'verified', 'rejected')) DEFAULT 'pending',
    verified_by TEXT,
    feedback TEXT,
    created_at TEXT DEFAULT (datetime('now')),
    updated_at TEXT DEFAULT (datetime('now')),
    FOREIGN KEY (session_id) REFERENCES sessions(id) ON DELETE CASCADE,
    FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (verified_by) REFERENCES users(id) ON DELETE SET NULL
);

-- For activity verifications
CREATE TABLE IF NOT EXISTS activity_verifications (
    id TEXT PRIMARY KEY,
    activity_id TEXT NOT NULL,
    student_id TEXT NOT NULL,
    verification_status TEXT CHECK(verification_status IN ('pending', 'verified', 'rejected')) DEFAULT 'pending',
    verified_by TEXT,
    feedback TEXT,
    created_at TEXT DEFAULT (datetime('now')),
    updated_at TEXT DEFAULT (datetime('now')),
    FOREIGN KEY (activity_id) REFERENCES activities(id) ON DELETE CASCADE,
    FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (verified_by) REFERENCES users(id) ON DELETE SET NULL
);

-- For competency verifications
CREATE TABLE IF NOT EXISTS competency_verifications (
    id TEXT PRIMARY KEY,
    student_competency_id TEXT NOT NULL,
    student_id TEXT NOT NULL,
    verification_status TEXT CHECK(verification_status IN ('pending', 'verified', 'rejected')) DEFAULT 'pending',
    verified_by TEXT,
    feedback TEXT,
    created_at TEXT DEFAULT (datetime('now')),
    updated_at TEXT DEFAULT (datetime('now')),
    FOREIGN KEY (student_competency_id) REFERENCES student_competencies(id) ON DELETE CASCADE,
    FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (verified_by) REFERENCES users(id) ON DELETE SET NULL
);

-- For profile verifications
CREATE TABLE IF NOT EXISTS profile_verifications (
    id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    document_url TEXT,
    verification_status TEXT CHECK(verification_status IN ('pending', 'verified', 'rejected')) DEFAULT 'pending',
    verified_by TEXT,
    feedback TEXT,
    created_at TEXT DEFAULT (datetime('now')),
    updated_at TEXT DEFAULT (datetime('now')),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (verified_by) REFERENCES users(id) ON DELETE SET NULL
);
```

## 2. API Endpoints

Create the following API endpoints:

1. Common endpoints:
   - `GET /api/verifications` - Get all verifications with filtering
   - `GET /api/verifications/[type]/[id]` - Get details for a specific verification
   - `PATCH /api/verifications/[type]/[id]` - Update status of a verification

2. Type-specific endpoints:
   - `GET /api/sessions` - Get all sessions
   - `GET /api/activities` - Get all activities
   - `GET /api/competencies` - Get all competencies
   - `GET /api/profile-verifications` - Get all profile verifications
   - `GET /api/students` - Get all students (for filtering)

## 3. Component Structure

### UI Components

1. Tabs Component (for switching between verification types):
   - Create a reusable Tabs component (`components/ui/tabs.tsx`)

2. Table Components (for displaying verification lists):
   - Create a reusable Table component (`components/ui/table.tsx`)
   - Add Badge component for status indicators (`components/ui/badge.tsx`)

3. VerificationDetail Component (for viewing and updating verification):
   - Create a reusable component for all verification types 
   - Include verification form with feedback entry
   - Add verification controls (verify/reject buttons)

### Pages

1. Mentor Verifications Page (`app/mentor/verifications/page.tsx`):
   - Main dashboard with tabs for different verification types
   - Summary statistics at the top
   - Filterable list of verifications
   - Limited to assigned students only

2. Admin Verifications Page (`app/admin/verifications/page.tsx`):
   - Admin-specific view with additional controls
   - Additional filters (by student, etc.)
   - Full access to all verifications

3. Detail Pages:
   - `app/mentor/verifications/[type]/[id]/page.tsx`
   - `app/admin/verifications/[type]/[id]/page.tsx`

# Combined Verifications Implementation Summary

We have successfully implemented the combined verifications system with the following components:

## Backend Implementation:
1. Created API routes for all verification types:
   - `/api/verifications` - Main endpoint to fetch all types of verifications
   - `/api/verifications/[type]/[id]` - For specific verification details and updates
   - `/api/sessions` - For session data
   - `/api/activities` - For activity data
   - `/api/competencies` - For competency data
   - `/api/profile-verifications` - For profile verification data
   - `/api/students` - For fetching student data for filters

2. Implemented role-based access control in all API routes:
   - Students can only view their own data
   - Mentors can only view/verify data for their assigned students
   - Admins can view/verify all data

## Frontend Implementation:
1. Created UI components:
   - `VerificationDetail.tsx` - Reusable component for all verification types
   - Added necessary UI components (Badge, Table, Separator, etc.)
   - Added formatDate utility for consistent date formatting

2. Created verification pages:
   - `/mentor/verifications` - Combined verification dashboard for mentors
   - `/admin/verifications` - Combined verification dashboard for admins
   - Detail pages for each verification type

3. Implemented features:
   - Tab-based interface for switching between verification types
   - Verification counts dashboard
   - Search and filtering by student, status, etc.
   - Verification status badges
   - Feedback mechanism for rejected verifications

## User Experience Improvements:
1. Consistent UI across all verification types
2. Easy navigation between different verification types
3. Quick access to pending verifications with counts
4. Detailed view of each verification with relevant information
5. Feedback mechanism for rejected verifications

The system now provides a unified interface for mentors and admins to manage all types of verifications (qualifications, sessions, activities, competencies, and profile verifications) in one place, while maintaining proper access controls and data integrity. 