# PRACTITIONER PASSPORT - COMPREHENSIVE PROJECT SPECIFICATION

## PROJECT OVERVIEW
------------------
Practitioner Passport is a comprehensive professional development tracking application designed for educational practitioners. It serves as a digital portfolio and professional development management system, enabling educators to track their qualifications, competencies, and teaching sessions while maintaining alignment with research-based practices.

## PROJECT OBJECTIVES
--------------------
- Create a centralized platform for educational practitioners to manage their professional development
- Enable tracking and verification of qualifications and experiences
- Facilitate evidence-based practice through research alignment
- Provide tools for session planning and reflection
- Support continuous professional development through competency tracking
- Enable supervisor feedback and assessment integration

## TARGET USERS & ROLES
----------------------
The system strictly supports only three user roles:

### Student Role
- Work placement students
- Track personal development
- Record activities and evidence
- Generate CV and documents
- Align skills with job requirements

### Mentor Role
- Review student submissions
- Provide feedback
- Track student progress
- Create templates and suggest activities
- Verify qualifications

### Admin Role
- System configuration and management
- User account management
- Data oversight and reporting
- Content management
- Integration configuration

## TECHNICAL STACK
-----------------
### Frontend:
- Next.js 14.1.0
- React 18.2.0
- TypeScript
- Tailwind CSS (for styling and responsive design)
- Lucide React (for icons)
- Recharts (for data visualization)
- Mobile-first responsive design approach

### Backend:
- API endpoints for data management
- NextAuth.js for authentication
- SQLite database (implemented as database.sqlite)
- Prisma ORM for database interactions
- File storage for evidence and documents
- Real-time updates
- Secure data handling

## MOBILE-FIRST DESIGN APPROACH
-----------------------------
The application is built with a mobile-first UI approach:
- Responsive layout that adapts from mobile to desktop
- Touch-friendly interface elements
- Bottom navigation bar on mobile views
- Expandable to tablet and desktop sizes
- Content prioritization for smaller screens
- Performance optimized for mobile devices

## ROLE-BASED ACCESS CONTROL
--------------------------
### Student Access
- **Full Access**:
  - Personal profile management
  - Activity recording and planning
  - Self-assessment tools
  - CV and cover letter generation
  - Own certificate management
  - Role alignment for personal development
  
- **Partial/Limited Access**:
  - View-only access to mentor feedback
  - Limited directory browsing
  - Resource library consumption
  
- **No Access**:
  - Other students' detailed information
  - Administrative functions
  - Mentor assessment tools

### Mentor Access
- **Full Access**:
  - Assigned student progress monitoring
  - Feedback provision tools
  - Report generation for assigned students
  - Activity and certificate verification
  - Resource contribution
  
- **Partial/Limited Access**:
  - Student directory (focused on assigned students)
  - System configuration (personal preferences only)
  
- **No Access**:
  - Administrative functions
  - Unassigned student information

### Admin Access
- **Full Access**:
  - All system configuration
  - User management
  - Role assignment
  - Data management
  - Integration configuration
  - Content management
  - Report generation
  
- **Special Capabilities**:
  - Override permissions when needed
  - Access audit logs
  - Troubleshoot user issues
  - Configure role-based access controls
  - Manage job database and external integrations

## CORE PAGES WITH ROLE-BASED ACCESS
-----------------------------------

### 1. Authentication & Account
- **Login Page** (All Users)
  - Credential verification
  - Password reset functionality
  - Remember me option
- **Account Settings** (All Users)
  - Password management
  - Two-factor authentication setup
  - Notification preferences
  - Personal information management
  - Profile completion tracker
  - *Admin-only*: User account management tools

### 2. Dashboard (Homepage)
- **Summary View** (All Users)
  - Role-specific KPI cards
  - Personalized notifications
  - Quick action buttons
  - *Student*: Development progress charts, upcoming activities
  - *Mentor*: Student oversight metrics, pending reviews
  - *Admin*: System health indicators, user activity metrics

- **Activity Stream** (All Users)
  - Recent platform activities relevant to user role
  - *Student*: Personal activity log, mentor feedback
  - *Mentor*: Student submission activity, approval requests
  - *Admin*: User registration, system alerts, bug reports

- **Quick Links** (All Users)
  - Role-appropriate shortcuts to frequent actions
  - *Student*: Add activity, update profile, check role alignment
  - *Mentor*: Review submissions, provide feedback, generate reports
  - *Admin*: User management, system configuration, data exports

### 3. Profile Management
- **Personal Information** (All Users)
  - Basic profile editing (name, contact, preferences)
  - *Student-only*: Profile picture, video introduction, academic background
  - *Student-only*: Career goals, role interests, industry preferences
  - *Mentor-only*: Professional expertise areas, mentoring approach
  - *Admin-only*: System role designation, access level configuration

- **Profile Visibility Settings** (All Users)
  - Privacy controls for profile elements
  - *Student-only*: Portfolio visibility options
  - *Admin-only*: Override capabilities for privacy settings

### 4. User Directory
- **People Browser** (All Users with different views)
  - *Student*: View mentor profiles, peer directory (limited info)
  - *Mentor*: View assigned students, other mentors
  - *Admin*: Complete user directory with management tools
  
- **User Management** (Admin-only)
  - Create/deactivate accounts
  - Role assignments
  - Student-mentor matching
  - Bulk user import/export

### 5. Activity Management
- **Activity Library** (All Users with different permissions)
  - *Student*: Browse, record, edit own activities, view templates
  - *Mentor*: Browse student activities, create templates, review submissions
  - *Admin*: Manage activity categories, create global templates
  
- **Activity Planning** (Students & Mentors)
  - Calendar integration
  - Goal setting
  - *Student*: Schedule personal activities
  - *Mentor*: Schedule reviews, suggest activities to students
  
- **Activity Recording** (Student-focused, Mentor review)
  - Detailed activity logger
  - Evidence upload capability
  - Reflection input sections
  - *Student*: Submit for review
  - *Mentor*: Approve/request changes
  - *Admin*: Audit activity logs, resolve disputes

### 6. Role Alignment Center
- **Job Requirements Analysis** (All Users with different capabilities)
  - *Student*: View personal alignment graphs, identify gaps
  - *Mentor*: View students' alignment data, suggest improvements
  - *Admin*: Configure job requirement criteria, manage database
  
- **Job Market Explorer** (All Users)
  - Browse job advertisements
  - *Student*: Compare qualifications, save favorite positions
  - *Mentor*: Recommend positions to students
  - *Admin*: Manage job database, integrate external sources

- **Skill Gap Analysis** (Students & Mentors)
  - *Student*: View personal skill gaps, get activity suggestions
  - *Mentor*: Analyze students' gaps, prioritize development areas
  - *Admin*: Define standard skill sets, configure gap algorithms

### 7. Certification & Qualifications
- **Certificate Management** (All Users with varying permissions)
  - *Student*: Upload, organize certificates, track expiration
  - *Mentor*: Verify student certificates, request additional information
  - *Admin*: Configure certificate categories, manage verification process
  
- **Qualification Portfolio** (Student-focused, Mentor access)
  - *Student*: Manage, categorize, export qualifications
  - *Mentor*: View student qualifications, suggest additions
  - *Admin*: Define qualification standards, configuration options

### 8. Progress & Reporting
- **Assessment Tools** (Students & Mentors)
  - *Student*: Self-assessment forms, development reflections
  - *Mentor*: Student assessment tools, comparison views
  - *Admin*: Configure assessment criteria, manage evaluation forms
  
- **Report Generation** (All Users with different capabilities)
  - *Student*: Personal progress reports, development timeline
  - *Mentor*: Individual and cohort student reports
  - *Admin*: System-wide analytics, usage reports, compliance documentation
  
- **Performance Visualization** (All Users)
  - Radar charts for competency development
  - *Student*: Personal vs. role requirement comparison
  - *Mentor*: Student comparison, historical tracking
  - *Admin*: Cohort-level analytics, platform effectiveness metrics

### 9. Document Generation
- **CV Builder** (Student-focused)
  - Template selection
  - Auto-population from profile data
  - *Student*: Generate, download personal CV
  - *Mentor*: Review, suggest improvements
  - *Admin*: Manage CV templates, track usage
  
- **Cover Letter Creator** (Student-focused)
  - Role-specific templates
  - *Student*: Generate customized cover letters
  - *Mentor*: Review, provide feedback
  - *Admin*: Manage letter templates

### 10. Communication Hub
- **Messaging System** (All Users with appropriate restrictions)
  - *Student*: Message assigned mentors, support
  - *Mentor*: Message assigned students, other mentors
  - *Admin*: Message any user, broadcast announcements
  
- **Notification Center** (All Users)
  - Alert management
  - Preference settings
  - *Student*: Activity, feedback, deadline alerts
  - *Mentor*: Submission, review reminder alerts
  - *Admin*: System, security, user management alerts

### 11. System Administration (Admin-only)
- **System Configuration**
  - Platform settings management
  - Feature toggles
  - Security policies
  - Interface customization
  
- **Data Management**
  - Backup and recovery
  - Data exports and imports
  - Analytics dashboard
  - Usage metrics
  
- **Integration Management**
  - External system connections
  - API configurations
  - Data synchronization settings

### 12. Support & Resources
- **Help Center** (All Users)
  - Role-specific documentation
  - Video tutorials
  - FAQs
  - *Admin-only*: Edit/create help content
  
- **Resource Library** (All Users with different access)
  - *Student*: Access learning materials
  - *Mentor*: Access and contribute resources
  - *Admin*: Manage all resource content

## AUTHENTICATION IMPLEMENTATION
-----------------------------
### Authentication Flow
- Email/password-based authentication
- JWT token-based sessions
- Remember-me functionality
- Secure password handling with hashing
- Role-based redirects after login
- Login attempt limiting
- Session timeout management

### Security Measures
- HTTPS for all transmissions
- Password complexity requirements
- Input validation
- CSRF protection
- XSS prevention
- Rate limiting on auth endpoints
- Secure cookie handling

### Database Structure (SQLite)
- User table with role designation
- Password hashing with bcrypt
- Session management tables
- Activity logs for security audit
- Permission mappings

## FRONT-END IMPLEMENTATION DETAILS
---------------------------------
### Authentication Pages Structure
1. **Login Page**
   - Two-column layout (60/40 split)
   - Left section for login form
   - Right section for promotional content
   - Responsive collapse to single column on mobile

2. **Sign Up Page**
   - Structured form with sections for:
     - Personal information
     - Professional details
     - Security credentials
   - Terms acceptance
   - Right panel with benefits and trust indicators

3. **Forgot Password Flow**
   - Three-step process
   - Email verification
   - Code confirmation
   - New password creation

### Landing Page Structure
- Mobile-optimized responsive layout
- Header with navigation and auth buttons
- Hero section with compelling CTA
- Feature highlights in grid layout
- Process explanation
- Benefits section
- Testimonials and social proof
- Institution partnerships
- Final CTA section
- Comprehensive footer

### Core Application UI
- Bottom navigation bar on mobile views
- Sidebar navigation on tablet/desktop
- Card-based content design
- Role-specific dashboard layouts
- Data visualization using charts and graphs
- Form validation with inline feedback
- Loading states and transitions
- Toast notifications for user actions

## DATABASE & DATA MANAGEMENT
--------------------------
### SQLite Implementation
- database.sqlite as primary datastore
- Prisma ORM for database interactions
- Schema with proper relationships
- User data segregation by role
- Activity and evidence storage
- Qualification and certificate management
- Progress tracking metrics

### Data Operations
- CRUD operations via API endpoints
- Data validation before storage
- Transaction support for complex operations
- Backup and restore utilities
- Data exports in multiple formats

## IMPLEMENTATION PRIORITIES
--------------------------
### Phase 1 (Launch Requirements):
1. User Authentication
2. Basic Profile Management
3. Qualification Tracking
4. Session Recording
5. Basic Dashboard
6. Essential Search
7. Core Notifications

### Phase 2 (First Update):
1. Advanced Competency Framework
2. Research Integration
3. Enhanced Reporting
4. Advanced Search
5. Communication System

### Phase 3 (Feature Complete):
1. Advanced Analytics
2. AI Recommendations
3. Community Features
4. External Integrations
5. Mobile Application

## TECHNICAL REQUIREMENTS
----------------------
### Performance
- Page load < 3 seconds
- Real-time updates
- Offline capability
- Mobile responsiveness
- Browser compatibility

### Security
- Data encryption
- Secure authentication
- Regular security audits
- GDPR compliance
- Data privacy controls

### Integration
- API documentation
- Third-party integration
- SSO capability
- Database integration
- Webhook support

## UI/UX CONSIDERATIONS
--------------------
### Mobile-First Design System
- Consistent styling
- Responsive layouts (mobile-first)
- Accessibility compliance
- Dark/light modes
- Component library
- Touch-optimized interface
- Bottom navigation pattern
- Content prioritization
- Progressive enhancement

### User Experience
- Intuitive navigation
- Clear error handling
- Loading states
- Form validation
- Helpful tooltips
- Touch gestures support
- Offline feedback
- Smooth transitions

### Visual Hierarchy
- Clear section boundaries
- Contrasting backgrounds
- Consistent typography scale
- Strategic use of white space
- Prominent CTAs
- Color coding by user role

## SUCCESS METRICS
----------------
- User engagement rates
- Professional development completion rates
- Research alignment scores
- User satisfaction metrics
- Platform reliability
- Data accuracy
- Feature adoption rates
- Mobile vs desktop usage statistics

## PROJECT FILE STRUCTURE
-----------------------
```
placement-tracking-app/
├── app/                                # Next.js app directory
│   ├── (auth)/                         # Authentication routes (grouped layout)
│   │   ├── login/
│   │   │   └── page.tsx                # Login page
│   │   ├── signup/
│   │   │   └── page.tsx                # Signup page
│   │   ├── forgot-password/
│   │   │   └── page.tsx                # Forgot password page
│   │   ├── mfa/                        # Multi-factor authentication
│   │   │   ├── setup/
│   │   │   │   └── page.tsx            # MFA setup page
│   │   │   └── verify/
│   │   │       └── page.tsx            # MFA verification page
│   │   └── layout.tsx                  # Shared auth layout
│   ├── (dashboard)/                    # Dashboard routes (grouped layout)
│   │   ├── layout.tsx                  # Dashboard layout with navigation
│   │   ├── page.tsx                    # Dashboard router (redirects based on role)
│   │   ├── student/                    # Student-specific dashboard
│   │   │   ├── page.tsx                # Student dashboard main page
│   │   │   ├── activities/             # Student activities pages
│   │   │   │   ├── page.tsx            # Activities overview
│   │   │   │   ├── [id]/               # Activity detail view
│   │   │   │   │   └── page.tsx        # Single activity page
│   │   │   │   └── new/
│   │   │   │       └── page.tsx        # Create new activity
│   │   │   ├── qualifications/         # Student qualifications pages
│   │   │   │   └── page.tsx            # Qualifications overview
│   │   │   ├── role-alignment/         # Student role alignment pages
│   │   │   │   └── page.tsx            # Role alignment tools
│   │   │   └── documents/              # Student document generation
│   │   │       └── page.tsx            # Document creation tools
│   │   ├── mentor/                     # Mentor-specific dashboard
│   │   │   ├── page.tsx                # Mentor dashboard main page
│   │   │   ├── students/               # Student management for mentors
│   │   │   │   ├── page.tsx            # Students overview
│   │   │   │   └── [id]/               # Individual student view
│   │   │   │       ├── page.tsx        # Student details page
│   │   │   │       └── activities/     # Student's activities
│   │   │   │           └── page.tsx    # Activities review page
│   │   │   ├── reviews/                # Activity reviews
│   │   │   │   ├── page.tsx            # Pending reviews list
│   │   │   │   └── [id]/
│   │   │   │       └── page.tsx        # Single review page
│   │   │   └── templates/              # Activity templates
│   │   │       └── page.tsx            # Templates management
│   │   ├── admin/                      # Admin-specific dashboard
│   │   │   ├── page.tsx                # Admin dashboard main page
│   │   │   ├── users/                  # User management
│   │   │   │   ├── page.tsx            # Users overview
│   │   │   │   └── [id]/               # User management
│   │   │   │       └── page.tsx        # Individual user management
│   │   │   ├── security/               # Security management
│   │   │   │   ├── page.tsx            # Security overview
│   │   │   │   ├── audit-logs/         # Audit logs viewer
│   │   │   │   │   └── page.tsx        # Audit logs page
│   │   │   │   └── settings/           # Security settings
│   │   │   │       └── page.tsx        # Security config page
│   │   │   ├── settings/               # System settings
│   │   │   │   └── page.tsx            # System configuration page
│   │   │   └── data/                   # Data management
│   │   │       └── page.tsx            # Data management page
│   │   ├── profile/                    # Profile management (shared, role-aware)
│   │   │   ├── page.tsx                # Profile overview page
│   │   │   └── edit/
│   │   │       └── page.tsx            # Edit profile page
│   │   ├── messages/                   # Communication hub (shared, role-aware)
│   │   │   ├── page.tsx                # Messages overview
│   │   │   └── [id]/                   # Conversation view
│   │   │       └── page.tsx            # Single conversation page
│   │   └── notifications/              # Notification center (shared, role-aware)
│   │       └── page.tsx                # Notifications page
│   ├── api/                            # API routes
│   │   ├── auth/                       # Authentication APIs
│   │   │   ├── [...nextauth]/          # NextAuth configuration
│   │   │   │   └── route.ts            # NextAuth route handler
│   │   │   ├── register/
│   │   │   │   └── route.ts            # Registration API
│   │   │   ├── mfa/                    # MFA endpoints
│   │   │   │   ├── setup/
│   │   │   │   │   └── route.ts        # MFA setup API
│   │   │   │   └── verify/
│   │   │   │       └── route.ts        # MFA verification API
│   │   │   └── reset-password/
│   │   │       └── route.ts            # Password reset API
│   │   ├── security/                   # Security-specific endpoints
│   │   │   ├── audit-log/
│   │   │   │   └── route.ts            # Audit logging API
│   │   │   └── key-rotation/
│   │   │       └── route.ts            # API key rotation
│   │   ├── users/                      # User-related APIs
│   │   │   ├── route.ts                # Users API endpoints
│   │   │   └── [id]/
│   │   │       └── route.ts            # Single user API endpoints
│   │   ├── activities/                 # Activity-related APIs
│   │   │   ├── route.ts                # Activities API endpoints
│   │   │   └── [id]/
│   │   │       ├── route.ts            # Single activity API endpoints
│   │   │       └── evidence/
│   │   │           └── route.ts        # Evidence upload API
│   │   ├── qualifications/             # Qualification APIs
│   │   │   ├── route.ts                # Qualifications API endpoints
│   │   │   └── [id]/
│   │   │       └── route.ts            # Single qualification API
│   │   ├── reports/                    # Reporting APIs
│   │   │   └── route.ts                # Report generation API
│   │   ├── documents/                  # Document generation APIs
│   │   │   ├── cv/
│   │   │   │   └── route.ts            # CV generation API
│   │   │   └── cover-letter/
│   │   │       └── route.ts            # Cover letter generation API
│   │   └── messages/                   # Messaging APIs
│   │       ├── route.ts                # Messages API endpoints
│   │       └── [id]/
│   │           └── route.ts            # Conversation API endpoints
│   ├── globals.css                     # Global styles
│   └── layout.tsx                      # Root layout with security headers
├── components/                         # Reusable components
│   ├── ui/                             # UI components
│   │   └── [UI components as previously defined]
│   ├── layout/                         # Layout components
│   │   ├── navbar.tsx                  # Top navigation bar
│   │   ├── sidebar.tsx                 # Sidebar navigation (desktop)
│   │   ├── bottom-nav.tsx              # Bottom navigation (mobile)
│   │   ├── header.tsx                  # Page header component
│   │   └── footer.tsx                  # Footer component
│   ├── auth/                           # Authentication components
│   │   └── [Auth components as previously defined]
│   ├── security/                       # Security-specific components
│   │   └── [Security components as previously defined]
│   ├── dashboard/                      # Dashboard components
│   │   ├── common/                     # Shared dashboard components
│   │   │   ├── stats-card.tsx          # Statistics card component
│   │   │   ├── activity-card.tsx       # Activity card component
│   │   │   ├── activity-stream.tsx     # Activity stream component
│   │   │   └── quick-links.tsx         # Quick links component
│   │   ├── student/                    # Student dashboard components
│   │   │   ├── progress-chart.tsx      # Student progress chart
│   │   │   ├── skill-gap-chart.tsx     # Skill gap visualization
│   │   │   ├── feedback-list.tsx       # Feedback display list
│   │   │   └── upcoming-deadlines.tsx  # Deadline reminders
│   │   ├── mentor/                     # Mentor dashboard components
│   │   │   ├── student-overview.tsx    # Student oversight panel
│   │   │   ├── review-queue.tsx        # Pending reviews component
│   │   │   ├── feedback-stats.tsx      # Feedback metrics display
│   │   │   └── student-picker.tsx      # Student selection UI 
│   │   └── admin/                      # Admin dashboard components
│   │       ├── system-metrics.tsx      # System health metrics
│   │       ├── user-stats.tsx          # User statistics display
│   │       ├── activity-log.tsx        # System activity log
│   │       └── role-switcher.tsx       # Role impersonation UI
│   ├── student/                        # Student-specific components
│   │   ├── activity-form.tsx           # Activity submission form
│   │   ├── evidence-upload.tsx         # Evidence uploader
│   │   ├── reflection-form.tsx         # Reflection input form
│   │   └── qualification-form.tsx      # Qualification form
│   ├── mentor/                         # Mentor-specific components
│   │   ├── review-form.tsx             # Activity review form
│   │   ├── feedback-form.tsx           # Feedback submission form
│   │   ├── template-creator.tsx        # Activity template creator
│   │   └── student-progress.tsx        # Student progress tracker
│   ├── admin/                          # Admin-specific components  
│   │   ├── user-management.tsx         # User management interface
│   │   ├── system-settings.tsx         # System settings controls
│   │   └── data-export.tsx             # Data export controls
│   └── [Other component directories as previously defined]
└── [Remaining directories and files as previously defined]
```

## ROLE-SPECIFIC IMPLEMENTATIONS
-----------------------------
### Dashboard Redirection Logic
```typescript
// app/(dashboard)/page.tsx
import { redirect } from 'next/navigation';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth/auth-options';

export default async function DashboardRedirect() {
  const session = await getServerSession(authOptions);
  
  if (!session) {
    return redirect('/login');
  }
  
  // Redirect based on user role
  switch (session.user.role) {
    case 'STUDENT':
      return redirect('/dashboard/student');
    case 'MENTOR':
      return redirect('/dashboard/mentor');
    case 'ADMIN':
      return redirect('/dashboard/admin');
    default:
      return redirect('/login');
  }
}
```

### Role-Specific Dashboard Layouts
Each role has its own dedicated dashboard with unique layouts and components:

#### Student Dashboard Implementation
```typescript
// app/(dashboard)/student/page.tsx
import { StudentProgressChart } from '@/components/dashboard/student/progress-chart';
import { FeedbackList } from '@/components/dashboard/student/feedback-list';
import { UpcomingDeadlines } from '@/components/dashboard/student/upcoming-deadlines';
import { SkillGapChart } from '@/components/dashboard/student/skill-gap-chart';
import { QuickActionButtons } from '@/components/dashboard/common/quick-links';

export default function StudentDashboard() {
  return (
    <div className="dashboard-container">
      <section className="progress-section">
        <h2>My Development Progress</h2>
        <StudentProgressChart />
      </section>
      
      <section className="feedback-section">
        <h2>Recent Feedback</h2>
        <FeedbackList limit={3} />
      </section>
      
      <section className="deadlines-section">
        <h2>Upcoming Deadlines</h2>
        <UpcomingDeadlines />
      </section>
      
      <section className="skills-section">
        <h2>Skill Gap Analysis</h2>
        <SkillGapChart />
      </section>
      
      <section className="actions-section">
        <h2>Quick Actions</h2>
        <QuickActionButtons role="STUDENT" />
      </section>
    </div>
  );
}
```

#### Mentor Dashboard Implementation
```typescript
// app/(dashboard)/mentor/page.tsx
import { StudentOverview } from '@/components/dashboard/mentor/student-overview';
import { ReviewQueue } from '@/components/dashboard/mentor/review-queue';
import { FeedbackStats } from '@/components/dashboard/mentor/feedback-stats';
import { QuickActionButtons } from '@/components/dashboard/common/quick-links';
import { RoleSwitcher } from '@/components/dashboard/admin/role-switcher';
import { useRoleSwitching } from '@/lib/hooks/use-role-switching';

export default function MentorDashboard() {
  // Role switching capability for mentors (to view as student)
  const { isImpersonating, effectiveRole, switchRole, returnToOriginalRole } = useRoleSwitching();
  
  return (
    <div className="dashboard-container">
      {/* Role switching UI */}
      <div className="role-controls">
        <RoleSwitcher 
          currentRole="MENTOR"
          canSwitchTo={['STUDENT']}
          onSwitch={switchRole}
        />
      </div>
      
      <section className="overview-section">
        <h2>Student Overview</h2>
        <StudentOverview />
      </section>
      
      <section className="reviews-section">
        <h2>Pending Reviews</h2>
        <ReviewQueue />
      </section>
      
      <section className="feedback-section">
        <h2>Feedback Stats</h2>
        <FeedbackStats />
      </section>
      
      <section className="actions-section">
        <h2>Quick Actions</h2>
        <QuickActionButtons role="MENTOR" />
      </section>
    </div>
  );
}
```

#### Admin Dashboard Implementation
```typescript
// app/(dashboard)/admin/page.tsx
import { SystemMetrics } from '@/components/dashboard/admin/system-metrics';
import { UserStats } from '@/components/dashboard/admin/user-stats';
import { ActivityLog } from '@/components/dashboard/admin/activity-log';
import { QuickActionButtons } from '@/components/dashboard/common/quick-links';
import { RoleSwitcher } from '@/components/dashboard/admin/role-switcher';
import { useRoleSwitching } from '@/lib/hooks/use-role-switching';

export default function AdminDashboard() {
  // Role switching capability for admins (to view as mentor or student)
  const { isImpersonating, effectiveRole, switchRole, returnToOriginalRole } = useRoleSwitching();
  
  return (
    <div className="dashboard-container">
      {/* Role switching UI */}
      <div className="role-controls">
        <RoleSwitcher 
          currentRole="ADMIN"
          canSwitchTo={['MENTOR', 'STUDENT']}
          onSwitch={switchRole}
          canSelectUser={true}
        />
      </div>
      
      <section className="system-section">
        <h2>System Health</h2>
        <SystemMetrics />
      </section>
      
      <section className="users-section">
        <h2>User Statistics</h2>
        <UserStats />
      </section>
      
      <section className="activity-section">
        <h2>System Activity</h2>
        <ActivityLog />
      </section>
      
      <section className="actions-section">
        <h2>Quick Actions</h2>
        <QuickActionButtons role="ADMIN" />
      </section>
    </div>
  );
}
```

// ... existing code ... 